{"version":3,"sources":["assets/shrek-dab.gif","assets/shrek-no-dab.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","_useState2","Object","slicedToArray","isDabbing","setDabbing","savedCounter","window","localStorage","getItem","initialCounter","parseInt","_useState3","_useState4","dabCounter","setDabCounter","startDabbing","e","newDabCounter","setItem","String","dab","preventDefault","stopDabbing","events","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","react_default","a","createElement","assign","className","src","shrekDab","shrekNoDab","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2OCmEzBC,SA7DO,WAAM,IAAAC,EACMC,oBAAS,GADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACRI,EADQJ,EAAA,GAGpBK,EAAeC,OAAOC,aAAaC,QAAQ,cAC7CC,EAAiB,EACA,OAAjBJ,IACFI,EAAiBC,SAASL,IANF,IAAAM,EAQUZ,mBAASU,GARnBG,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAQnBE,EARmBD,EAAA,GAQPE,EAROF,EAAA,GAgB1B,SAASG,EAAaC,GACpBZ,GAAW,GAPb,WACE,IAAMa,EAAgBJ,EAAa,EACnCC,EAAcG,GACdX,OAAOC,aAAaW,QAAQ,aAAcC,OAAOF,IAKjDG,GACAJ,EAAEK,iBAGJ,SAASC,EAAYN,GACnBZ,GAAW,GAGb,IAAImB,EAAS,GAcb,OAXEA,EADE,iBAAkBjB,OACX,CACPkB,aAAcT,EACdU,WAAYH,GAGL,CACPI,YAAaX,EACbY,UAAWL,GAKbM,EAAAC,EAAAC,cAAA,MAAA7B,OAAA8B,OAAA,CACEC,UAAU,OACNT,GAEJK,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAAA,OACEE,UAAU,kBACVC,IAAK9B,EAAY+B,IAAWC,IAC5BC,IAAI,UAGRR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BAAqBjB,EAArB,eChDJwB,EAAcC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KClGjEC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsB,IACnBC,SACD9D,OAAOiC,SAAS8B,MAEJC,SAAWhE,OAAOiC,SAAS+B,OAIvC,OAGFhE,OAAOiE,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAA6B,OAAMJ,SAAN,sBAEP/B,GAgEV,SAAiCM,EAAeC,GAE9C6B,MAAM9B,GACHK,KAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,KAAK,SAAAC,GACjCA,EAAagC,aAAajC,KAAK,WAC7B1C,OAAOiC,SAAS2C,aAKpBxC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MC/C/BE","file":"static/js/main.1b32608e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shrek-dab.761c33d2.gif\";","module.exports = __webpack_public_path__ + \"static/media/shrek-no-dab.0be7510d.png\";","import React, { useState } from \"react\";\nimport shrekDab from \"./assets/shrek-dab.gif\";\nimport shrekNoDab from \"./assets/shrek-no-dab.png\";\nimport \"./App.css\";\nimport { start } from \"repl\";\n\nconst App: React.FC = () => {\n  const [isDabbing, setDabbing] = useState(false);\n\n  const savedCounter = window.localStorage.getItem('dabcounter');\n  let initialCounter = 0;\n  if (savedCounter !== null) {\n    initialCounter = parseInt(savedCounter);\n  }\n  const [dabCounter, setDabCounter] = useState(initialCounter);\n\n  function dab() {\n    const newDabCounter = dabCounter + 1;\n    setDabCounter(newDabCounter);\n    window.localStorage.setItem('dabcounter', String(newDabCounter));\n  }\n\n  function startDabbing(e: React.SyntheticEvent) {\n    setDabbing(true);\n    dab();\n    e.preventDefault();\n  }\n\n  function stopDabbing(e: React.SyntheticEvent) {\n    setDabbing(false);\n  }\n\n  let events = {};\n\n  if ('ontouchstart' in window) {\n    events = {\n      onTouchStart: startDabbing,\n      onTouchEnd: stopDabbing\n    }\n  } else {\n    events = {\n      onMouseDown: startDabbing,\n      onMouseUp: stopDabbing\n    }\n  }\n\n  return (\n    <div\n      className=\"App\"\n      {...events}\n    >\n      <div className=\"App-image-container\">\n        <img\n          className=\"App-shrek-image\"\n          src={isDabbing ? shrekDab : shrekNoDab}\n          alt=\"logo\"\n        />\n      </div>\n      <div className=\"App-counter-container\">\n        <h1>\n          <p>Shrek has dabbed {dabCounter} times</p>\n        </h1>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}