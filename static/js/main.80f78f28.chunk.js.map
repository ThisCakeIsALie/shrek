{"version":3,"sources":["assets/shrek-dab.gif","assets/shrek-no-dab.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","_useState2","Object","slicedToArray","isDabbing","setDabbing","isTouching","useRef","savedCounter","window","localStorage","getItem","initialCounter","parseInt","_useState3","_useState4","dabCounter","setDabCounter","dab","_dab","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","newDabCounter","wrap","_context","prev","next","setItem","String","stop","startDabbing","_x","_startDabbing","_callee2","e","_context2","stopDabbing","events","onTouchStart","preventDefault","current","onTouchEnd","onMouseDown","onMouseUp","react_default","createElement","assign","className","src","shrekDab","shrekNoDab","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.80f78f28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shrek-dab.761c33d2.gif\";","module.exports = __webpack_public_path__ + \"static/media/shrek-no-dab.0be7510d.png\";","import React, { useState, useRef } from \"react\";\r\nimport shrekDab from \"./assets/shrek-dab.gif\";\r\nimport shrekNoDab from \"./assets/shrek-no-dab.png\";\r\nimport \"./App.css\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isDabbing, setDabbing] = useState(false);\r\n  const isTouching = useRef(false);\r\n\r\n  const savedCounter = window.localStorage.getItem(\"dabcounter\");\r\n  let initialCounter = 0;\r\n  if (savedCounter !== null) {\r\n    initialCounter = parseInt(savedCounter);\r\n  }\r\n  const [dabCounter, setDabCounter] = useState(initialCounter);\r\n\r\n  async function dab() {\r\n    const newDabCounter = dabCounter + 1;\r\n    await setDabCounter(newDabCounter);\r\n    await window.localStorage.setItem(\"dabcounter\", String(newDabCounter));\r\n  }\r\n\r\n  async function startDabbing(e: React.SyntheticEvent) {\r\n    await setDabbing(true);\r\n    await dab();\r\n  }\r\n\r\n  function stopDabbing(e: React.SyntheticEvent) {\r\n    setDabbing(false);\r\n  }\r\n\r\n  const events = {\r\n    onTouchStart: (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      isTouching.current = true;\r\n      startDabbing(e);\r\n    },\r\n    onTouchEnd: (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      stopDabbing(e);\r\n    },\r\n    onMouseDown: (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      if (!isTouching.current) {\r\n        startDabbing(e);\r\n      }\r\n    },\r\n    onMouseUp:(e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      isTouching.current = false;\r\n      stopDabbing(e);\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" {...events}>\r\n      <div className=\"App-image-container\">\r\n        <img\r\n          className=\"App-shrek-image\"\r\n          src={isDabbing ? shrekDab : shrekNoDab}\r\n          alt=\"logo\"\r\n        />\r\n      </div>\r\n      <div className=\"App-counter-container\">\r\n        <h1>\r\n          <p>Shrek has dabbed {dabCounter} times</p>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}